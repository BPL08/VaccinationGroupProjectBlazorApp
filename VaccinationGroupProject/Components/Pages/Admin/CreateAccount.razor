@page "/admin/account/create"
@using VaccinationGroupProject.Components.Admin
@layout AdminLayout
@inject IAccountRepository AccountRepository
@inject NavigationManager NavigationManager
@inject ISessionStorageService SessionStorage
@rendermode InteractiveServer

@if (isAuthenticated)
{
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h3 class="mb-0">Create New Account</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@InputModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label fw-bold">Username</label>
                                <InputText @bind-Value="InputModel.Username" class="form-control" placeholder="Enter username" />
                                <ValidationMessage For="@(() => InputModel.Username)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-bold">Password</label>
                                <InputText @bind-Value="InputModel.Password" class="form-control" type="password" placeholder="Enter password" />
                                <ValidationMessage For="@(() => InputModel.Password)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-bold">Phone Number</label>
                                <InputText @bind-Value="InputModel.PhoneNumber" class="form-control" placeholder="Enter phone number" />
                                <ValidationMessage For="@(() => InputModel.PhoneNumber)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-bold">Email</label>
                                <InputText @bind-Value="InputModel.Email" class="form-control" placeholder="Enter email address" />
                                <ValidationMessage For="@(() => InputModel.Email)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-bold">Role</label>
                                <InputSelect @bind-Value="InputModel.Role" class="form-select">
                                    <option value="Customer">Customer</option>
                                    <option value="Admin">Admin</option>
                                    <option value="Staff">Staff</option>
                                </InputSelect>
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-bold">Status</label>
                                <InputSelect @bind-Value="InputModel.Status" class="form-select">
                                    <option value="ACTIVATE">Active</option>
                                    <option value="DEACTIVATE">Inactive</option>
                                </InputSelect>
                            </div>

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-3">@errorMessage</div>
                            }

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary">Create Account</button>
                                <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">Please log in as an administrator to access this page.</div>
}

@code {
    private CreateAccountInputModel InputModel { get; set; } = new CreateAccountInputModel();
    private bool isAuthenticated = false;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var accountRole = await SessionStorage.GetItemAsStringAsync("AccountRole");
            isAuthenticated = !string.IsNullOrEmpty(accountRole) && 
                accountRole.Trim('"').Equals("Admin", StringComparison.OrdinalIgnoreCase);
            
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleValidSubmit()
    {
        try
        {
            if (!int.TryParse(InputModel.PhoneNumber, out int phoneNumber))
            {
                errorMessage = "Invalid phone number format.";
                return;
            }

            var account = new Account
            {
                AccountId = Guid.NewGuid(),
                UserName = InputModel.Username,
                Password = InputModel.Password,
                PhoneNumber = phoneNumber,
                Email = InputModel.Email,
                AccountRole = InputModel.Role,
                ProfileImage = null,
                FKCenterId = null,
                Center = null,
                Status = InputModel.Status
            };

            AccountRepository.AddAccount(account);
            NavigateBack();
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            Console.WriteLine($"Error creating account: {ex.Message}");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin/account");
    }

    public class CreateAccountInputModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Phone number is required.")]
        public string PhoneNumber { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Role is required.")]
        public string Role { get; set; } = "Customer";

        [Required(ErrorMessage = "Status is required.")]
        public string Status { get; set; } = "ACTIVATE";
    }
}
