@page "/admin/center"
@using VaccinationGroupProject.Components.Admin
@layout AdminLayout
@inject IVaccineCenterRepository VaccineCenterRepository
@inject IAccountRepository AccountRepository
@inject ISessionStorageService SessionStorage
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@if (isAuthenticated)
{
    <h3>Create Vaccine Center</h3>

    <EditForm Model="@vaccineCenter" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="name">Center Name:</label>
            <InputText id="name" class="form-control" @bind-Value="vaccineCenter.Name" />
            <ValidationMessage For="@(() => vaccineCenter.Name)" />
        </div>

        <div class="form-group mb-3">
            <label for="location">Location:</label>
            <InputText id="location" class="form-control" @bind-Value="vaccineCenter.Location" />
            <ValidationMessage For="@(() => vaccineCenter.Location)" />
        </div>

        <div class="form-group mb-3">
            <label for="status">Status:</label>
            <InputSelect id="status" class="form-control" @bind-Value="vaccineCenter.Status">
                <option value="">Select Status</option>
                <option value="Active">Active</option>
                <option value="Inactive">Inactive</option>
            </InputSelect>
            <ValidationMessage For="@(() => vaccineCenter.Status)" />
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <button type="submit" class="btn btn-primary">Create Center</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
    </EditForm>
}
else
{
    <div class="alert alert-warning">Please log in to create a vaccine center.</div>
}

@code {
    private VaccineCenter vaccineCenter = new VaccineCenter();
    private bool isAuthenticated = false;
    private string ErrorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var accountRole = await SessionStorage.GetItemAsStringAsync("AccountRole");

                if (accountRole==RoleEnums.Admin)
                {
                    isAuthenticated = true;
                }
                else
                {
                    NavigationManager.NavigateTo("/login");
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error checking authentication: {ex.Message}";
            }
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            VaccineCenterRepository.AddVaccineCenter(vaccineCenter);
            NavigationManager.NavigateTo("/centers");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating center: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/centers");
    }
}