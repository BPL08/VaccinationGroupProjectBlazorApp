@page "/admin/account"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IAccountRepository AccountRepository
@inject IVaccineCenterRepository VaccineCenterRepository
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <AdminNavBar />

        <main class="col-md-9 col-lg-10 p-4">
            <h3 class="mb-3">Manage Accounts</h3>
            @if (!isAuthorized && hasRendered)
            {
                <div class="text-danger">Unauthorized access. Redirecting to login...</div>
            }
            else if (accounts == null)
            {
                <p class="lead">Loading accounts...</p>
            }
            else if (!accounts.Any())
            {
                <div class="text-center p-4 bg-light border rounded">
                    <p class="lead">No accounts found.</p>
                    <button class="btn btn-primary" @onclick="ShowAddAccountModal">Add New Account</button>
                </div>
            }
            else
            {
                <div class="overflow-auto mt-3">
                    <button class="btn btn-primary mb-3" @onclick="ShowAddAccountModal">Add New Account</button>
                    <table class="table table-striped table-hover table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Username</th>
                                <th scope="col">Email</th>
                                <th scope="col">Role</th>
                                <th scope="col">Center</th>
                                <th scope="col">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var account in accounts)
                            {
                                <tr>
                                    <td>@account.AccountId.ToString("N").Substring(0, 8)</td>
                                    <td>@account.UserName</td>
                                    <td>@account.Email</td>
                                    <td>@account.AccountRole</td>
                                    <td>@(account.FKCenterId.HasValue ? account.Center?.Name ?? "Loading..." : "N/A")</td>
                                    <td>
                                        <span class="badge @(account.Status?.ToLower() == "active" ? "bg-success" : "bg-danger")">
                                            @account.Status
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (showModal)
            {
                <div class="modal fade show d-block" tabindex="-1" @onclick="CloseModal">
                    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Add New Account</h4>
                                <button type="button" class="btn-close" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="@newAccount" OnValidSubmit="HandleAddAccount">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="text-danger" />
                                    <div class="mb-3">
                                        <label class="form-label">Username</label>
                                        <InputText @bind-Value="newAccount.UserName" class="form-control" />
                                        <ValidationMessage For="@(() => newAccount.UserName)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Email</label>
                                        <InputText @bind-Value="newAccount.Email" class="form-control" />
                                        <ValidationMessage For="@(() => newAccount.Email)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Password</label>
                                        <InputText @bind-Value="newAccount.Password" class="form-control" type="password" />
                                        <ValidationMessage For="@(() => newAccount.Password)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Phone Number</label>
                                        <InputText @bind-Value="phoneNumberString" class="form-control" type="text" pattern="\d*" maxlength="10" />
                                        <ValidationMessage For="@(() => newAccount.PhoneNumber)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Role</label>
                                        <InputSelect @bind-Value="newAccount.AccountRole" class="form-control" @onchange="OnRoleChanged">
                                            <option value="">Select Role</option>
                                            <option value="@RoleEnums.Admin">Admin</option>
                                            <option value="@RoleEnums.Staff">Staff</option>
                                            <option value="@RoleEnums.Customer">Customer</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => newAccount.AccountRole)" class="text-danger" />
                                    </div>
                                    @if (newAccount.AccountRole == RoleEnums.Staff && centers != null)
                                    {
                                        <div class="mb-3">
                                            <label class="form-label">Center</label>
                                            <InputSelect @bind-Value="selectedCenterId" class="form-control">
                                                <option value="">Select Center</option>
                                                @foreach (var center in centers)
                                                {
                                                    <option value="@center.VacineCenterId">@center.Name</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    }
                                    <div class="mb-3">
                                        <label class="form-label">Status</label>
                                        <InputSelect @bind-Value="newAccount.Status" class="form-control">
                                            <option value="">Select Status</option>
                                            <option value="Active">Active</option>
                                            <option value="Inactive">Inactive</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => newAccount.Status)" class="text-danger" />
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary">Save</button>
                                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </main>
    </div>
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@code {
    private bool hasRendered = false;
    private bool isAuthorized = false;
    private List<Account> accounts = new List<Account>();
    private List<VaccineCenter> centers;
    private bool showModal = false;
    private Account newAccount = new Account();
    private string selectedCenterId;
    private string phoneNumberString
    {
        get => newAccount.PhoneNumber.ToString();
        set => newAccount.PhoneNumber = int.TryParse(value, out int result) ? result : 0;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");

            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == RoleEnums.Admin;
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                await LoadData();
            }
        }
    }

    private async Task LoadData()
    {
        try
        {
            accounts = AccountRepository.GetAllAccounts() ?? new List<Account>();
            var (fetchedCenters, _) = VaccineCenterRepository.GetAllVaccineCenters(1, int.MaxValue);
            centers = fetchedCenters ?? new List<VaccineCenter>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            accounts = new List<Account>();
            centers = new List<VaccineCenter>();
            StateHasChanged();
        }
    }

    private void ShowAddAccountModal()
    {
        newAccount = new Account();
        selectedCenterId = "";
        phoneNumberString = "";
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task HandleAddAccount()
    {
        if (newAccount.AccountRole == RoleEnums.Staff && !string.IsNullOrEmpty(selectedCenterId))
        {
            newAccount.FKCenterId = int.Parse(selectedCenterId);
        }
        AccountRepository.AddAccount(newAccount);
        showModal = false;
        await LoadData();
    }

    private void OnRoleChanged(ChangeEventArgs e)
    {
        newAccount.AccountRole = e.Value.ToString();
        if (newAccount.AccountRole != RoleEnums.Staff)
        {
            newAccount.FKCenterId = null;
            selectedCenterId = "";
        }
    }

    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(AccountRepository.GetAccountById(Guid.Parse(accountId)));
    }

    
}