@page "/admin/account"
@using VaccinationGroupProject.Components.Admin
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IAccountRepository AccountRepository
@inject IVaccineCenterRepository VaccineCenterRepository
@rendermode InteractiveServer
@layout AdminLayout
@inject IJSRuntime JSRuntime


<div class="container-fluid">
    <div class="row">
        <main class="col-md-9 col-lg-10 p-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary bg-gradient text-white d-flex justify-content-between align-items-center py-3">
                    <h3 class="m-0 fw-bold"><i class="bi bi-people-fill me-2"></i>Quản lý tài khoản</h3>
                    <button class="btn btn-light" @onclick="ShowAddAccountModal">
                        <i class="bi bi-plus-circle me-1"></i> Tạo tài khoản mới
                    </button>
                </div>
                
                <div class="card-body">
                    <div class="mb-4">
                        <div class="input-group shadow-sm">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-search text-primary"></i>
                            </span>
                            <input type="text" class="form-control border-start-0" placeholder="Tìm kiếm theo tên hoặc email..." 
                                   @bind="searchTerm" @bind:event="oninput" />
                            <select class="form-select border-start-0" style="max-width: 200px;" @bind="roleFilter">
                                <option value="">Tất cả vai trò</option>
                                <option value="Customer">Khách hàng</option>
                                <option value="Admin">Quản trị viên</option>
                                <option value="Staff">Nhân viên</option>
                            </select>
                            <button class="btn btn-primary" @onclick="() => StateHasChanged()">
                                <i class="bi bi-funnel-fill me-1"></i> Lọc
                            </button>
                        </div>
                    </div>

                    @if (!isAuthorized && hasRendered)
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i> Truy cập không được phép. Đang chuyển hướng...
                        </div>
                    }
                    else if (accounts == null)
                    {
                        <div class="text-center p-5">
                            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-3 text-muted">Đang tải dữ liệu tài khoản...</p>
                        </div>
                    }
                    else if (!filteredAccounts.Any())
                    {
                        <div class="text-center p-5 bg-light border rounded">
                            <i class="bi bi-search text-muted" style="font-size: 3rem;"></i>
                            <p class="lead mt-3">Không tìm thấy tài khoản nào.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light text-nowrap">
                                    <tr>
                                        <th scope="col" class="rounded-start">ID</th>
                                        <th scope="col">Tên người dùng</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">Vai trò</th>
                                        <th scope="col">Trung tâm</th>
                                        <th scope="col">Trạng thái</th>
                                        <th scope="col" class="rounded-end text-center">Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var account in filteredAccounts)
                                    {
                                        <tr class="border-bottom">
                                            <td class="text-muted">@account.AccountId.ToString("N").Substring(0, 8)</td>
                                            <td class="fw-medium">@account.UserName</td>
                                            <td>@account.Email</td>
                                            <td>
                                                <span class="badge rounded-pill @GetRoleBadgeClass(account.AccountRole)">
                                                    @account.AccountRole
                                                </span>
                                            </td>
                                            <td>@(account.FKCenterId.HasValue ? account.Center?.Name ?? "Đang tải..." : "N/A")</td>
                                            <td>
                                                <span class="badge @(account.Status?.ToLower() == "activate" ? "bg-success" : "bg-danger") rounded-pill">
                                                    @(account.Status?.ToLower() == "activate" ? "Hoạt động" : "Không hoạt động")
                                                </span>
                                            </td>
                                            <td>
                                                <div class="d-flex justify-content-center gap-2">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditAccount(account.AccountId)">
                                                        <i class="bi bi-pencil-square"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAccount(account.AccountId)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <p class="text-muted mb-0">Hiển thị @filteredAccounts.Count tài khoản</p>
                            <div>
                                <button class="btn btn-sm btn-outline-primary me-2" disabled>
                                    <i class="bi bi-chevron-left"></i> Trước
                                </button>
                                <button class="btn btn-sm btn-outline-primary">
                                    Sau <i class="bi bi-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Modals remain mostly unchanged but with improved styling -->
            @if (showModal)
            {
                <div class="modal fade show d-block" tabindex="-1" @onclick="CloseModal">
                    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
                        <div class="modal-content shadow">
                            <div class="modal-header bg-primary text-white">
                                <h4 class="modal-title"><i class="bi bi-person-plus me-2"></i>Thêm tài khoản mới</h4>
                                <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="@newAccount" OnValidSubmit="HandleAddAccount">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="text-danger" />
                                    <div class="mb-3">
                                        <label class="form-label">Username</label>
                                        <InputText @bind-Value="newAccount.UserName" class="form-control" />
                                        <ValidationMessage For="@(() => newAccount.UserName)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Email</label>
                                        <InputText @bind-Value="newAccount.Email" class="form-control" />
                                        <ValidationMessage For="@(() => newAccount.Email)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Password</label>
                                        <InputText @bind-Value="newAccount.Password" class="form-control" type="password" />
                                        <ValidationMessage For="@(() => newAccount.Password)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Phone Number</label>
                                        <InputText @bind-Value="phoneNumberString" class="form-control" type="text" pattern="\d*" maxlength="10" />
                                        <ValidationMessage For="@(() => newAccount.PhoneNumber)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Role</label>
                                        <InputSelect @bind-Value="newAccount.AccountRole" class="form-control" @onchange="OnRoleChanged">
                                            <option value="">Select Role</option>
                                            <option value="@RoleEnums.Admin">Admin</option>
                                            <option value="@RoleEnums.Staff">Staff</option>
                                            <option value="@RoleEnums.Customer">Customer</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => newAccount.AccountRole)" class="text-danger" />
                                    </div>
                                    @if (newAccount.AccountRole == RoleEnums.Staff && centers != null)
                                    {
                                        <div class="mb-3">
                                            <label class="form-label">Center</label>
                                            <InputSelect @bind-Value="selectedCenterId" class="form-control">
                                                <option value="">Select Center</option>
                                                @foreach (var center in centers)
                                                {
                                                    <option value="@center.VacineCenterId">@center.Name</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    }
                                    <div class="mb-3">
                                        <label class="form-label">Status</label>
                                        <InputSelect @bind-Value="newAccount.Status" class="form-control">
                                            <option value="">Select Status</option>
                                            <option value="ACTIVATE">Active</option>
                                            <option value="DEACTIVATE">Inactive</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => newAccount.Status)" class="text-danger" />
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary">Save</button>
                                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            @if (showEditModal)
            {
                <div class="modal fade show d-block" tabindex="-1" @onclick="CloseEditModal">
                    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
                        <div class="modal-content shadow">
                            <div class="modal-header bg-primary text-white">
                                <h4 class="modal-title"><i class="bi bi-pencil-square me-2"></i>Chỉnh sửa tài khoản</h4>
                                <button type="button" class="btn-close btn-close-white" @onclick="CloseEditModal"></button>
                            </div>
                            <div class="modal-body">
                                @if (editAccount != null)
                                {
                                    <EditForm Model="editAccount" OnValidSubmit="HandleEditSubmit">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary class="text-danger" />
                                        
                                        <div class="mb-3">
                                            <label class="form-label">Username</label>
                                            <InputText @bind-Value="editAccount.UserName" class="form-control" />
                                            <ValidationMessage For="@(() => editAccount.UserName)" class="text-danger" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Email</label>
                                            <InputText @bind-Value="editAccount.Email" class="form-control" />
                                            <ValidationMessage For="@(() => editAccount.Email)" class="text-danger" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Role</label>
                                            <InputSelect @bind-Value="editAccount.AccountRole" class="form-control" @onchange="OnEditRoleChanged">
                                                <option value="@RoleEnums.Admin">Admin</option>
                                                <option value="@RoleEnums.Staff">Staff</option>
                                                <option value="@RoleEnums.Customer">Customer</option>
                                            </InputSelect>
                                        </div>

                                        @if (editAccount.AccountRole == RoleEnums.Staff && centers != null)
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">Center</label>
                                                <InputSelect @bind-Value="selectedEditCenterId" class="form-control">
                                                    <option value="">Select Center</option>
                                                    @foreach (var center in centers)
                                                    {
                                                        <option value="@center.VacineCenterId">@center.Name</option>
                                                    }
                                                </InputSelect>
                                            </div>
                                        }

                                        <div class="mb-3">
                                            <label class="form-label">Status</label>
                                            <InputSelect @bind-Value="editAccount.Status" class="form-control">
                                                <option value="ACTIVATE">Active</option>
                                                <option value="DEACTIVATE">Inactive</option>
                                            </InputSelect>
                                        </div>

                                        <div class="d-flex gap-2">
                                            <button type="submit" class="btn btn-primary">Save Changes</button>
                                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                                        </div>
                                    </EditForm>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </main>
    </div>
</div>

<!-- Add Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
    .table th {
        font-weight: 600;
        color: #495057;
    }
    
    .card {
        border-radius: 0.5rem;
        border: none;
    }
    
    .card-header {
        border-radius: 0.5rem 0.5rem 0 0 !important;
    }
    
    .modal-content {
        border-radius: 0.5rem;
        border: none;
    }
    
    .modal-header {
        border-radius: 0.5rem 0.5rem 0 0;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    .btn-primary:hover {
        background-color: #0b5ed7;
        border-color: #0a58ca;
    }
</style>

@code {
    private bool hasRendered = false;
    private bool isAuthorized = false;
    private List<Account> accounts = new List<Account>();
    private List<VaccineCenter> centers;
    private bool showModal = false;
    private Account newAccount = new Account();
    private string selectedCenterId;
    private string searchTerm = "";
    private string roleFilter = "";
    private string phoneNumberString
    {
        get => newAccount.PhoneNumber.ToString();
        set => newAccount.PhoneNumber = int.TryParse(value, out int result) ? result : 0;
    }

    private List<Account> filteredAccounts => ApplyFilters();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");

            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == RoleEnums.Admin;
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                await LoadData();
            }
        }
    }

    private async Task LoadData()
    {
        try
        {
            accounts = AccountRepository.GetAllAccounts() ?? new List<Account>();
            var (fetchedCenters, _) = VaccineCenterRepository.GetAllVaccineCenters(1, int.MaxValue);
            centers = fetchedCenters ?? new List<VaccineCenter>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            accounts = new List<Account>();
            centers = new List<VaccineCenter>();
            StateHasChanged();
        }
    }

    private void ShowAddAccountModal()
    {
        newAccount = new Account();
        selectedCenterId = "";
        phoneNumberString = "";
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task HandleAddAccount()
    {
        if (newAccount.AccountRole == RoleEnums.Staff && !string.IsNullOrEmpty(selectedCenterId))
        {
            newAccount.FKCenterId = int.Parse(selectedCenterId);
        }
        AccountRepository.AddAccount(newAccount);
        showModal = false;
        await LoadData();
    }

    private void OnRoleChanged(ChangeEventArgs e)
    {
        newAccount.AccountRole = e.Value.ToString();
        if (newAccount.AccountRole != RoleEnums.Staff)
        {
            newAccount.FKCenterId = null;
            selectedCenterId = "";
        }
    }

    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(AccountRepository.GetAccountById(Guid.Parse(accountId)));
    }

    private List<Account> ApplyFilters()
    {
        if (accounts == null) return new List<Account>();

        var result = accounts;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            result = result.Where(a => 
                a.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
                a.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }

        if (!string.IsNullOrWhiteSpace(roleFilter))
        {
            result = result.Where(a => a.AccountRole == roleFilter).ToList();
        }

        return result;
    }

    private async Task DeleteAccount(Guid accountId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this account?");
        
        if (confirmed)
        {
            try
            {
                AccountRepository.DeleteAccount(accountId);
                await LoadData();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete account: " + ex.Message);
            }
        }
    }

    private bool showEditModal = false;
    private Account editAccount;
    private string selectedEditCenterId;

    private void ShowEditModal(Guid accountId)
    {
        editAccount = AccountRepository.GetAccountById(accountId);
        selectedEditCenterId = editAccount.FKCenterId?.ToString() ?? "";
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editAccount = null;
    }

    private void OnEditRoleChanged(ChangeEventArgs e)
    {
        editAccount.AccountRole = e.Value.ToString();
        if (editAccount.AccountRole != RoleEnums.Staff)
        {
            editAccount.FKCenterId = null;
            selectedEditCenterId = "";
        }
    }

    private async Task HandleEditSubmit()
    {
        try
        {
            if (editAccount.AccountRole == RoleEnums.Staff && !string.IsNullOrEmpty(selectedEditCenterId))
            {
                editAccount.FKCenterId = int.Parse(selectedEditCenterId);
            }

            AccountRepository.UpdateAccountDetails(
                editAccount.AccountId,
                editAccount.UserName,
                editAccount.Email,
                editAccount.AccountRole,
                editAccount.Status
            );

            showEditModal = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to update account: " + ex.Message);
        }
    }

    // Update the EditAccount method to use the modal
    private void EditAccount(Guid accountId)
    {
        ShowEditModal(accountId);
    }

    // Add this new method for role badge styling
    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "bg-danger",
            "Staff" => "bg-warning text-dark",
            "Customer" => "bg-info text-dark",
            _ => "bg-secondary"
        };
    }
    
    // Rest of the code remains the same
}