@page "/admin/center"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject Repository.Interface.IVaccineCenterRepository VaccineCenterRepository
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <AdminNavBar />

        <main class="col-md-9 col-lg-10 p-4">
            <h3 class="mb-3">Manage Vaccine Centers</h3>
            @if (centers == null)
            {
                <p class="lead text-center">Loading centers...</p>
            }
            else if (centers.Count == 0)
            {
                <div class="text-center p-4 bg-light border rounded">
                    <p class="lead">No vaccine centers found.</p>
                    <button class="btn btn-primary" @onclick="ShowAddCenterModal">Add New Center</button>
                </div>
            }
            else
            {
                <div class="overflow-auto mt-3">
                    <button class="btn btn-primary mb-3" @onclick="ShowAddCenterModal">Add New Center</button>
                    <table class="table table-striped table-hover table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Name</th>
                                <th scope="col">Location</th>
                                <th scope="col">Contact</th>
                                <th scope="col">Email</th>
                                <th scope="col">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var center in centers)
                            {
                                <tr>
                                    <td>@center.VacineCenterId</td>
                                    <td>@center.Name</td>
                                    <td>@center.Location</td>
                                    <td>@center.ContactNumber</td>
                                    <td>@center.Email</td>
                                    <td>
                                        <span class="badge @(center.Status?.ToLower() == "active" ? "bg-success" : "bg-danger")">
                                            @center.Status
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-center align-items-center gap-3 mt-3">
                    <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(currentPage <= 1)">Previous</button>
                    <span>Page @currentPage of @totalPages</span>
                    <button class="btn btn-primary" @onclick="NextPage" disabled="@(currentPage >= totalPages)">Next</button>
                </div>
            }

            @if (showModal)
            {
                <div class="modal fade show d-block" tabindex="-1" @onclick="CloseModal">
                    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Add New Vaccine Center</h4>
                                <button type="button" class="btn-close" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="@newCenter" OnValidSubmit="HandleAddCenter">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="text-danger" />
                                    <div class="mb-3">
                                        <label class="form-label">Name</label>
                                        <InputText @bind-Value="newCenter.Name" class="form-control" />
                                        <ValidationMessage For="@(() => newCenter.Name)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Location</label>
                                        <InputText @bind-Value="newCenter.Location" class="form-control" />
                                        <ValidationMessage For="@(() => newCenter.Location)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Contact Number</label>
                                        <InputText @bind-Value="contactNumberString" class="form-control" type="text" pattern="\d*" maxlength="10" />
                                        <ValidationMessage For="@(() => newCenter.ContactNumber)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Email</label>
                                        <InputText @bind-Value="newCenter.Email" class="form-control" />
                                        <ValidationMessage For="@(() => newCenter.Email)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Status</label>
                                        <InputSelect @bind-Value="newCenter.Status" class="form-control">
                                            <option value="">Select Status</option>
                                            <option value="Active">Active</option>
                                            <option value="Inactive">Inactive</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => newCenter.Status)" class="text-danger" />
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary">Save</button>
                                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </main>
    </div>
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
@code {
    private bool isAuthorized = false;
    private bool hasRendered = false;
    private List<VaccineCenter> centers;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling((double)totalCount / pageSize);
    private bool showModal = false;
    private VaccineCenter newCenter = new BO.Entity.VaccineCenter();
    private string contactNumberString
    {
        get => newCenter.ContactNumber.ToString();
        set => newCenter.ContactNumber = int.TryParse(value, out int result) ? result : 0;
    }

  

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");

            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == RoleEnums.Admin;
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/Error");
            }
            else
            {
                await LoadCenters();
            }
        }
    }

    private async Task LoadCenters()
    {
        var (fetchedCenters, count) = VaccineCenterRepository.GetAllVaccineCenters(currentPage, pageSize);
        centers = fetchedCenters;
        totalCount = count;
        StateHasChanged();
    }

    private async void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadCenters();
        }
    }

    private async void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadCenters();
        }
    }

    private void ShowAddCenterModal()
    {
        newCenter = new BO.Entity.VaccineCenter(); // Reset form
        contactNumberString = ""; // Reset contact number
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task HandleAddCenter()
    {
        VaccineCenterRepository.AddVaccineCenter(newCenter);
        showModal = false;
        await LoadCenters(); // Refresh the list
    }

    
    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(new Account
        {
            AccountId = Guid.Parse(accountId),
            AccountRole = RoleEnums.Admin
        });
    }
}