@page "/admin"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@rendermode InteractiveServer



<div class="admin-container">
    <div class="row">
        <!-- Sidebar -->
        <AdminNavBar />

        <!-- Main content -->
        <main role="main" class="main-content">
            <h3>Admin Dashboard</h3>
            <p>Welcome to the Admin Panel</p>
        </main>
    </div>
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
@code {
    private bool isAuthorized;
    private bool hasRendered; 

    private void NavigateToCenter() => NavigateTo("center");
    private void NavigateToDashboard() => NavigateTo("dashboard");
    private void NavigateToUsers() => NavigateTo("account");
    private void NavigateToSettings() => NavigateTo("settings");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");

            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == RoleEnums.Admin;
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

           
            if (!isAuthorized)
            {
                Navigation.NavigateTo("/Error");
            }
        }
    }

    private void NavigateTo(string page)
    {
        Navigation.NavigateTo($"/admin/{page}");
    }

    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(new Account
            {
                AccountId = Guid.Parse(accountId),
                AccountRole = RoleEnums.Admin
            });
    }
}