@page "/admin/category"
@using VaccinationGroupProject.Components.Admin
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IVaccineCategoryRepository VaccineCategoryRepository
@inject IAccountRepository AccountRepository
@rendermode InteractiveServer
@layout AdminLayout
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <main class="col-md-9 col-lg-10 p-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary bg-gradient text-white d-flex justify-content-between align-items-center py-3">
                    <h3 class="m-0 fw-bold"><i class="bi bi-tags-fill me-2"></i>Quản lý danh mục vaccine</h3>
                    <button class="btn btn-light" @onclick="ShowAddModal">
                        <i class="bi bi-plus-circle me-1"></i> Thêm danh mục mới
                    </button>
                </div>
                
                <div class="card-body">
                    <div class="mb-4">
                        <div class="input-group shadow-sm">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-search text-primary"></i>
                            </span>
                            <input type="text" class="form-control border-start-0" placeholder="Tìm kiếm danh mục..." 
                                   @bind="searchTerm" @bind:event="oninput" @onkeyup="SearchCategories" />
                            <button class="btn btn-primary" @onclick="SearchCategories">
                                <i class="bi bi-funnel-fill me-1"></i> Tìm kiếm
                            </button>
                        </div>
                    </div>

                    @if (!isAuthorized && hasRendered)
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i> Truy cập không được phép. Đang chuyển hướng...
                        </div>
                    }
                    else if (categories == null)
                    {
                        <div class="text-center p-5">
                            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-3 text-muted">Đang tải dữ liệu danh mục...</p>
                        </div>
                    }
                    else if (!filteredCategories.Any())
                    {
                        <div class="text-center p-5 bg-light border rounded">
                            <i class="bi bi-folder text-muted" style="font-size: 3rem;"></i>
                            <p class="lead mt-3">Không tìm thấy danh mục nào.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light text-nowrap">
                                    <tr>
                                        <th scope="col" class="rounded-start">ID</th>
                                        <th scope="col">Tên danh mục</th>
                                        <th scope="col">Danh mục cha</th>
                                        <th scope="col">Mô tả</th>
                                        <th scope="col">Trạng thái</th>
                                        <th scope="col" class="rounded-end text-center">Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var category in filteredCategories)
                                    {
                                        <tr class="border-bottom">
                                            <td class="text-muted">@category.VaccineCategoryId</td>
                                            <td class="fw-medium">@category.CategoryName</td>
                                            <td>
                                                @if (category.ParentCategory != null)
                                                {
                                                    <span class="badge bg-info text-dark rounded-pill">
                                                        <i class="bi bi-diagram-3 me-1"></i>@category.ParentCategory.CategoryName
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted"><i class="bi bi-dash"></i> Không có</span>
                                                }
                                            </td>
                                            <td>@category.Description</td>
                                            <td>
                                                <span class="badge rounded-pill @(category.Status?.ToLower() == "active" ? "bg-success" : "bg-danger")">
                                                    @(category.Status?.ToLower() == "active" ? "Hoạt động" : "Không hoạt động")
                                                </span>
                                            </td>
                                            <td>
                                                <div class="d-flex justify-content-center gap-2">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(category)">
                                                        <i class="bi bi-pencil-square"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCategory(category.VaccineCategoryId)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

            @if (showModal)
            {
                <div class="modal fade show d-block" tabindex="-1" @onclick="CloseModal">
                    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
                        <div class="modal-content shadow">
                            <div class="modal-header bg-primary text-white">
                                <h4 class="modal-title">
                                    @if (editMode)
                                    {
                                        <i class="bi bi-pencil-square me-2"></i>@("Chỉnh sửa danh mục")
                                    }
                                    else
                                    {
                                        <i class="bi bi-plus-circle me-2"></i>@("Thêm danh mục mới")
                                    }
                                </h4>
                                <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="@currentCategory" OnValidSubmit="HandleSubmit">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="text-danger" />

                                    <div class="mb-3">
                                        <label class="form-label">Tên danh mục</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="bi bi-tag"></i></span>
                                            <InputText @bind-Value="currentCategory.CategoryName" class="form-control" placeholder="Nhập tên danh mục" />
                                        </div>
                                        <ValidationMessage For="@(() => currentCategory.CategoryName)" class="text-danger" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Danh mục cha</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="bi bi-diagram-3"></i></span>
                                            <InputSelect @bind-Value="selectedParentId" class="form-control">
                                                <option value="">Không có</option>
                                                @foreach (var cat in categories.Where(c => c.VaccineCategoryId != currentCategory.VaccineCategoryId))
                                                {
                                                    <option value="@cat.VaccineCategoryId">@cat.CategoryName</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Mô tả</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                                            <InputTextArea @bind-Value="currentCategory.Description" class="form-control" rows="3" placeholder="Nhập mô tả danh mục" />
                                        </div>
                                        <ValidationMessage For="@(() => currentCategory.Description)" class="text-danger" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Trạng thái</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="bi bi-toggle-on"></i></span>
                                            <InputSelect @bind-Value="currentCategory.Status" class="form-control">
                                                <option value="Active">Hoạt động</option>
                                                <option value="Inactive">Không hoạt động</option>
                                            </InputSelect>
                                        </div>
                                    </div>

                                    <div class="d-flex gap-2 justify-content-end mt-4">
                                        <button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">
                                            <i class="bi bi-x-circle me-1"></i> Hủy
                                        </button>
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-check-circle me-1"></i> Lưu
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </main>
    </div>
</div>

<!-- Add Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

<style>
    .table th {
        font-weight: 600;
        color: #495057;
    }
    
    .card {
        border-radius: 0.5rem;
        border: none;
    }
    
    .card-header {
        border-radius: 0.5rem 0.5rem 0 0 !important;
    }
    
    .modal-content {
        border-radius: 0.5rem;
        border: none;
    }
    
    .modal-header {
        border-radius: 0.5rem 0.5rem 0 0;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .input-group-text {
        background-color: #f8f9fa;
    }
    
    .btn-outline-primary:hover {
        background-color: #0d6efd;
        color: white;
    }
    
    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
    }
</style>

@code {
    private bool hasRendered = false;
    private bool isAuthorized = false;
    private List<VaccineCategory> categories = new();
    private bool showModal = false;
    private bool editMode = false;
    private VaccineCategory currentCategory = new();
    private string selectedParentId = "";
    private string searchTerm = "";

    private List<VaccineCategory> filteredCategories => ApplyFilters();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");
            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == RoleEnums.Admin;
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                await LoadData();
            }
        }
    }

    private async Task LoadData()
    {
        try
        {
            categories = VaccineCategoryRepository.GetAllVaccineCategories() ?? new List<VaccineCategory>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading categories: {ex.Message}");
            categories = new List<VaccineCategory>();
        }
    }

    private List<VaccineCategory> ApplyFilters()
    {
        if (categories == null) return new List<VaccineCategory>();

        var result = categories;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            result = result.Where(c => 
                c.CategoryName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
                c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }

        return result;
    }

    private void ShowAddModal()
    {
        editMode = false;
        currentCategory = new VaccineCategory { Status = "Active" };
        selectedParentId = "";
        showModal = true;
    }

    private void ShowEditModal(VaccineCategory category)
    {
        editMode = true;
        currentCategory = new VaccineCategory
        {
            VaccineCategoryId = category.VaccineCategoryId,
            CategoryName = category.CategoryName,
            Description = category.Description,
            Status = category.Status,
            FKParentCategoryId = category.FKParentCategoryId
        };
        selectedParentId = category.FKParentCategoryId?.ToString() ?? "";
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentCategory = new VaccineCategory();
        selectedParentId = "";
    }

    private async Task HandleSubmit()
    {
        try
        {
            currentCategory.FKParentCategoryId = !string.IsNullOrEmpty(selectedParentId) ? 
                int.Parse(selectedParentId) : null;

            if (editMode)
            {
                VaccineCategoryRepository.UpdateVaccineCategory(
                    currentCategory.VaccineCategoryId,
                    currentCategory
                );
            }
            else
            {
                VaccineCategoryRepository.AddVaccineCategory(currentCategory);
            }

            showModal = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving category: {ex.Message}");
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?");
        
        if (confirmed)
        {
            try
            {
                VaccineCategoryRepository.DeleteVaccineCategory(categoryId);
                await LoadData();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting category: {ex.Message}");
            }
        }
    }

    private async Task SearchCategories()
    {
        StateHasChanged();
    }

    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(AccountRepository.GetAccountById(Guid.Parse(accountId)));
    }
}