@page "/admin/account/edit/{AccountId:guid}"
@using VaccinationGroupProject.Components.Admin
@layout AdminLayout
@inject IAccountRepository AccountRepository
@inject IVaccineCenterRepository VaccineCenterRepository
@inject NavigationManager NavigationManager
@inject ISessionStorageService SessionStorage
@rendermode InteractiveServer

@if (isAuthenticated)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h3 class="mb-0">Edit Account</h3>
                    </div>
                    <div class="card-body">
                        @if (account != null)
                        {
                            <EditForm Model="account" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />

                                <div class="mb-3">
                                    <label class="form-label">Username</label>
                                    <InputText @bind-Value="account.UserName" class="form-control" />
                                    <ValidationMessage For="@(() => account.UserName)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <InputText @bind-Value="account.Email" class="form-control" />
                                    <ValidationMessage For="@(() => account.Email)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Role</label>
                                    <InputSelect @bind-Value="account.AccountRole" class="form-select">
                                        <option value="Customer">Customer</option>
                                        <option value="Admin">Admin</option>
                                        <option value="Staff">Staff</option>
                                    </InputSelect>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Status</label>
                                    <InputSelect @bind-Value="account.Status" class="form-select">
                                        <option value="ACTIVATE">Active</option>
                                        <option value="DEACTIVATE">Inactive</option>
                                    </InputSelect>
                                </div>

                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">Please log in as an administrator to access this page.</div>
}

@code {
    [Parameter]
    public Guid AccountId { get; set; }

    private Account account;
    private List<VaccineCenter> centers = new();
    private bool isAuthenticated = false;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var accountRole = await SessionStorage.GetItemAsStringAsync("AccountRole");
            isAuthenticated = !string.IsNullOrEmpty(accountRole) && 
                accountRole.Trim('"').Equals("Admin", StringComparison.OrdinalIgnoreCase);

            if (isAuthenticated)
            {
                try
                {
                    account = AccountRepository.GetAccountById(AccountId);
                    if (account == null)
                    {
                        NavigationManager.NavigateTo("/admin/account");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading account: {ex.Message}");
                    NavigationManager.NavigateTo("/admin/account");
                }
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleValidSubmit()
    {
        try
        {
            AccountRepository.UpdateAccountDetails(
                AccountId,
                account.UserName,
                account.Email,
                account.AccountRole,
                account.Status
            );
            NavigateBack();
        }
        catch (InvalidOperationException ex)
        {
            // Handle validation errors (duplicate email/username)
            Console.WriteLine($"Validation error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating account: {ex.Message}");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin/account");
    }
}