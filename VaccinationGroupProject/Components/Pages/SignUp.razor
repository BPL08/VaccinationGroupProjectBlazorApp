@page "/signup"
@inject IAccountRepository AccountRepository
@inject ISessionStorageService SessionStorage
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="card shadow p-4">
        <h3 class="text-center mb-4">Sign Up</h3>

        <EditForm Model="@InputModel" OnValidSubmit="HandleSignUp">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label fw-bold">Username</label>
                <InputText @bind-Value="InputModel.Username" class="form-control" placeholder="Enter username" />
                <ValidationMessage For="@(() => InputModel.Username)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold">Password</label>
                <InputText @bind-Value="InputModel.Password" class="form-control" type="password" placeholder="Enter password" />
                <ValidationMessage For="@(() => InputModel.Password)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold">Phone Number</label>
                <InputText @bind-Value="InputModel.PhoneNumber" class="form-control" placeholder="Enter phone number" />
                <ValidationMessage For="@(() => InputModel.PhoneNumber)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold">Email</label>
                <InputText @bind-Value="InputModel.Email" class="form-control" placeholder="Enter email address" />
                <ValidationMessage For="@(() => InputModel.Email)" class="text-danger" />
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-primary">Sign Up</button>
            </div>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger mt-3">@ErrorMessage</div>
            }

            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success mt-3">@SuccessMessage</div>
            }
        </EditForm>
    </div>
</div>

@code {
    private SignUpInputModel InputModel { get; set; } = new SignUpInputModel();
    private string ErrorMessage { get; set; }
    private string SuccessMessage { get; set; }

    private async Task HandleSignUp()
    {
        try
        {
            if (!int.TryParse(InputModel.PhoneNumber, out int phoneNumber))
            {
                ErrorMessage = "Invalid phone number format.";
                SuccessMessage = string.Empty;
                return;
            }

            var account = new Account
                {
                    AccountId = Guid.NewGuid(),
                    UserName = InputModel.Username,
                    Password = InputModel.Password,
                    PhoneNumber = phoneNumber,
                    Email = InputModel.Email,
                    AccountRole = AccountRoles.Customer,
                    ProfileImage = null,
                    FKCenterId = null,
                    Center = null,
                    Status = ActivationEnums.ACTIVATE.ToString()
                };

            AccountRepository.SignUp(account);
            await SessionStorage.SetItemAsync("AccountId", account.AccountId.ToString());

            SuccessMessage = "Account successfully created!";
            ErrorMessage = string.Empty;
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
            SuccessMessage = string.Empty;
        }
    }

    public class SignUpInputModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Phone number is required.")]
        public string PhoneNumber { get; set; } // Changed to string

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }
    }
}
