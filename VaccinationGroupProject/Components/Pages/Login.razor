@page "/login"
@inject IAccountRepository AccountRepository
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@rendermode InteractiveServer

<div class="login-container">
    <h3>Login</h3>

    <EditForm Model="@InputModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label class="control-label">Username</label>
            <InputText @bind-Value="InputModel.Username" class="form-control" />
            <ValidationMessage For="@(() => InputModel.Username)" class="text-danger" />
        </div>

        <div class="form-group">
            <label class="control-label">Password</label>
            <InputText @bind-Value="InputModel.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => InputModel.Password)" class="text-danger" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="text-danger">@ErrorMessage</div>
        }
    </EditForm>
    <div class="form-group">
        <button class="btn btn-secondary" @onclick="NavigateToSignUp">Sign Up</button>
    </div>
</div>

@code {
    private LoginInputModel InputModel { get; set; } = new LoginInputModel();
    private string ErrorMessage { get; set; }

    private async Task HandleLogin()
    {
        var account = AccountRepository.Login(InputModel.Username, InputModel.Password);

        if (account != null)
        {
            await SessionStorage.SetItemAsync("AccountId", account.AccountId.ToString());
            Navigation.NavigateTo("/index");
        }
        else
        {
            ErrorMessage = "Invalid username or password";
        }
    }
    private void NavigateToSignUp()
    {
        Navigation.NavigateTo("/signup");
    }
    public class LoginInputModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }
}
