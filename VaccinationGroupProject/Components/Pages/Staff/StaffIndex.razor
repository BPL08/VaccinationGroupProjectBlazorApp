@page "/staff"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IAccountRepository AccountRepository
@rendermode InteractiveServer

<div class="staff-container">
    <div class="row h-100">
        <!-- Sidebar Component -->
        <StaffNavBar />

        <!-- Main content -->
        <main role="main" class="col-md-9 col-lg-10 p-4">
            @if (!isAuthorized && hasRendered)
            {
                <div class="text-danger">Unauthorized access. Redirecting to login...</div>
            }
            else
            {
                <h3 class="mb-3">Staff Dashboard</h3>
                <p class="lead">Welcome to the Staff Portal</p>
            }
        </main>
    </div>
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
@code {
    private bool hasRendered = false;
    private bool isAuthorized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");

            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == RoleEnums.Staff;
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(AccountRepository.GetAccountById(Guid.Parse(accountId)));
    }

   
}