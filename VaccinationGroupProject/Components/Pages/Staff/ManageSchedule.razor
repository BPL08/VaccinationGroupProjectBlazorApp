@page "/staff/manageschedule"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IVaccinationScheduleRepository VaccinationScheduleRepository
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <StaffNavBar />

        <main class="col-md-9 col-lg-10 p-4">
            <h3 class="mb-4 text-primary">Vaccination Schedule</h3>

            <!-- Filter Section -->
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Filter Schedules</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Start Date</label>
                            <InputDate @bind-Value="filterStartDate" class="form-control" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">End Date</label>
                            <InputDate @bind-Value="filterEndDate" class="form-control" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Center Name</label>
                            <InputText @bind-Value="filterCenterName" class="form-control" placeholder="Enter Center Name" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Status</label>
                            <InputSelect @bind-Value="filterStatus" class="form-control">
                                <option value="">All</option>
                                <option value="0">Pending</option>
                                <option value="1">Active</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Profile Name</label>
                            <InputText @bind-Value="filterProfileName" class="form-control" placeholder="Enter Profile Name" />
                        </div>
                    </div>
                    <div class="mt-3 d-flex gap-2">
                        <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
                        <button class="btn btn-secondary" @onclick="ResetFilters">Reset</button>
                    </div>
                </div>
            </div>

            @if (!isAuthorized && hasRendered)
            {
                <div class="text-danger">Unauthorized access. Redirecting to error...</div>
            }
            else if (schedules == null)
            {
                <p class="lead text-muted">Loading schedules...</p>
            }
            else if (!schedules.Any())
            {
                <div class="text-center p-5 bg-light border rounded shadow-sm">
                    <p class="lead text-secondary">No schedules found with the applied filters.</p>
                </div>
            }
            else
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <span>Schedules (@schedules.Count)</span>
                    </div>
                    <div class="card-body p-0 overflow-auto">
                        <table class="table table-hover custom-table mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th scope="col">Schedule ID</th>
                                    <th scope="col">Profile Name</th>
                                    <th scope="col">Center Name</th>
                                    <th scope="col">Dose Number</th>
                                    <th scope="col">Appointment Date</th>
                                    <th scope="col">Actual Date</th>
                                    <th scope="col">Administered By</th>
                                    <th scope="col">Status</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var schedule in schedules)
                                {
                                    <tr>
                                        <td>@schedule.VaccinationScheduleId</td>
                                        <td>@(schedule.Profile?.Name ?? "N/A")</td>
                                        <td>@(schedule.Center?.Name ?? "N/A")</td>
                                        <td>@schedule.DoseNumber</td>
                                        <td>@schedule.AppointmentDate.ToString("MMM dd, yyyy")</td>
                                        <td>@(schedule.ActualDate.HasValue ? schedule.ActualDate.Value.ToString("MMM dd, yyyy") : "Not Yet")</td>
                                        <td>@(schedule.AdministeredBy ?? "N/A")</td>
                                        <td>
                                            <span class="badge @(schedule.Status == 1 ? "bg-success" : "bg-warning")">
                                                @(schedule.Status == 1 ? "Active" : "Pending")
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn btn-outline-info btn-sm me-1" @onclick="() => ShowOrderDetailModal(schedule.VaccinationScheduleId)">Details</button>
                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowUpdateModal(schedule)">Edit</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <!-- Update Modal Component -->
            <UpdateScheduleModal ShowModal="@showUpdateModal"
                                 Schedule="@selectedSchedule"
                                 OnClose="HideUpdateModal"
                                 OnSave="RefreshData" />

            <!-- Order Detail Modal Component -->
            <OrderDetailModal ShowModal="@showOrderDetailModal"
                              OrderDetail="@selectedOrderDetail"
                              OnClose="HideOrderDetailModal" />
        </main>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@code {
    private bool hasRendered = false;
    private bool isAuthorized = false;
    private List<VaccinationSchedule> schedules = new List<VaccinationSchedule>();
    private bool showUpdateModal = false;
    private VaccinationSchedule selectedSchedule;
    private bool showOrderDetailModal = false;
    private OrderDetail selectedOrderDetail;

    // Filter properties
    private DateTime filterStartDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
    private DateTime filterEndDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek).AddDays(6);
    private string filterCenterName = "";
    private string filterStatus = "";
    private string filterProfileName = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");

            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == "Staff";
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/Error");
            }
            else
            {
                await LoadData();
            }
        }
    }

    private async Task LoadData()
    {
        try
        {
            schedules = VaccinationScheduleRepository.GetVaccinationSchedulesByDateRange(filterStartDate, filterEndDate) ?? new List<VaccinationSchedule>();

            if (!string.IsNullOrEmpty(filterCenterName))
            {
                schedules = schedules.Intersect(VaccinationScheduleRepository.GetVaccinationSchedulesByCenterName(filterCenterName)).ToList();
            }
            if (!string.IsNullOrEmpty(filterStatus))
            {
                schedules = schedules.Intersect(VaccinationScheduleRepository.GetVaccinationSchedulesByStatus(int.Parse(filterStatus))).ToList();
            }
            if (!string.IsNullOrEmpty(filterProfileName))
            {
                schedules = schedules.Intersect(VaccinationScheduleRepository.GetVaccinationSchedulesByProfileName(filterProfileName)).ToList();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            schedules = new List<VaccinationSchedule>();
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        await LoadData();
    }

    private async Task ResetFilters()
    {
        filterStartDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
        filterEndDate = filterStartDate.AddDays(6);
        filterCenterName = "";
        filterStatus = "";
        filterProfileName = "";
        await LoadData();
    }

    private void ShowOrderDetailModal(Guid vaccinationScheduleId)
    {
        selectedOrderDetail = VaccinationScheduleRepository.GetOrderDetailByVaccinationScheduleId(vaccinationScheduleId);
        showOrderDetailModal = true;
    }

    private async Task HideOrderDetailModal()
    {
        showOrderDetailModal = false;
        await Task.CompletedTask;
    }

    private void ShowUpdateModal(VaccinationSchedule schedule)
    {
        selectedSchedule = new VaccinationSchedule
            {
                VaccinationScheduleId = schedule.VaccinationScheduleId,
                FKProfileId = schedule.FKProfileId,
                FKCenterId = schedule.FKCenterId,
                FKOrderDetailsId = schedule.FKOrderDetailsId,
                DoseNumber = schedule.DoseNumber,
                AppointmentDate = schedule.AppointmentDate,
                ActualDate = schedule.ActualDate,
                AdministeredBy = schedule.AdministeredBy,
                Status = schedule.Status
            };
        showUpdateModal = true;
    }

    private async Task HideUpdateModal()
    {
        showUpdateModal = false;
        await Task.CompletedTask;
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(new Account { AccountRole = "Staff" });
    }
}