@page "/staff/managevaccines/{BatchId:int}"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IVaccineRepository VaccineRepository
@inject IVaccineBatchRepository VaccineBatchRepository
@inject IVaccineCategoryRepository VaccineCategoryRepository
@inject IWebHostEnvironment WebHostEnvironment
@using BO.Entity
@using BO.Enums
@rendermode InteractiveServer


<div class="container-fluid">
    <div class="row">
        <StaffNavBar />

        <main class="col-md-9 col-lg-10 p-4">
            <h3 class="mb-3">Manage Vaccines for Batch #@BatchId</h3>
            @if (!isAuthorized && hasRendered)
            {
                    <div class="text-danger">Unauthorized access. Redirecting to error...</div>
            }
            else if (vaccines == null || categories == null)
            {
                    <p class="lead">Loading vaccines and categories...</p>
            }
            else if (!vaccines.Any())
            {
                    <div class="text-center p-4 bg-light border rounded">
                        <p class="lead">No vaccines found for this batch.</p>
                        <button class="btn btn-primary" @onclick="ShowAddVaccineModal">Add New Vaccine</button>
                    </div>
            }
            else
            {
                    <div class="overflow-auto mt-3">
                        <button class="btn btn-primary mb-3" @onclick="ShowAddVaccineModal">Add New Vaccine</button>
                    <button class="btn btn-secondary" @onclick="GoBack">Back</button>
                        <table class="table table-striped table-hover table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th scope="col">Vaccine ID</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Category</th>
                                    <th scope="col">Status</th>
                                    <th scope="col">Price</th>
                                    <th scope="col">Expiration Date</th>
                                </tr>
                            </thead>
                            <tbody>
                            @foreach (var vaccine in vaccines)
                            {
                                        <tr>
                                            <td>@vaccine.VaccineId</td>
                                            <td>@vaccine.Name</td>
                                            <td>@(vaccine.Category?.CategoryName ?? "N/A")</td>
                                            <td>
                                                <span class="badge @(vaccine.Status == ActivationEnums.ACTIVATE ? "bg-success" : "bg-danger")">
                                            @(vaccine.Status == ActivationEnums.ACTIVATE ? "Active" : "Deactivated")
                                                </span>
                                            </td>
                                            <td>@vaccine.Price</td>
                                            <td>@vaccine.ExpirationDate.ToString("yyyy-MM-dd")</td>
                                        </tr>
                            }
                            </tbody>
                        </table>
                    </div>
            }

            @if (showModal)
            {
                    <div class="modal fade show d-block" tabindex="-1" @onclick="CloseModal">
                        <div class="modal-dialog modal-dialog-centered modal-lg" @onclick:stopPropagation>
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title">Add New Vaccine</h4>
                                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                                </div>
                                <div class="modal-body">
                                    <EditForm Model="@newVaccine" OnValidSubmit="HandleAddVaccine" enctype="multipart/form-data">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary class="text-danger" />
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label class="form-label">Name</label>
                                                    <InputText @bind-Value="newVaccine.Name" class="form-control" />
                                                    <ValidationMessage For="@(() => newVaccine.Name)" class="text-danger" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Category</label>
                                                    <InputSelect @bind-Value="newVaccine.FKCategoryId" class="form-control">
                                                        <option value="">Select Category</option>
                                                    @foreach (var category in categories)
                                                    {
                                                                <option value="@category.VaccineCategoryId">@category.CategoryName</option>
                                                    }
                                                    </InputSelect>
                                                    <ValidationMessage For="@(() => newVaccine.FKCategoryId)" class="text-danger" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Status</label>
                                                    <InputSelect @bind-Value="newVaccine.Status" class="form-control">
                                                        <option value="">Select Status</option>
                                                        <option value="@ActivationEnums.ACTIVATE">Activate</option>
                                                        <option value="@ActivationEnums.DEACTIVATE">Deactivate</option>
                                                    </InputSelect>
                                                    <ValidationMessage For="@(() => newVaccine.Status)" class="text-danger" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Unit of Volume</label>
                                                    <InputNumber @bind-Value="newVaccine.UnitOfVolume" class="form-control" />
                                                    <ValidationMessage For="@(() => newVaccine.UnitOfVolume)" class="text-danger" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Price</label>
                                                    <InputNumber @bind-Value="newVaccine.Price" class="form-control" />
                                                    <ValidationMessage For="@(() => newVaccine.Price)" class="text-danger" />
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label class="form-label">Image</label>
                                                    <InputFile OnChange="@HandleFileSelected" class="form-control" accept="image/*" />
                                                @if (!string.IsNullOrEmpty(imagePreviewUrl))
                                                {
                                                            <img src="@imagePreviewUrl" alt="Preview" class="img-thumbnail mt-2" style="max-width: 200px;" />
                                                }
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Min Age</label>
                                                    <InputNumber @bind-Value="newVaccine.MinAge" class="form-control" />
                                                    <ValidationMessage For="@(() => newVaccine.MinAge)" class="text-danger" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Max Age</label>
                                                    <InputNumber @bind-Value="newVaccine.MaxAge" class="form-control" />
                                                    <ValidationMessage For="@(() => newVaccine.MaxAge)" class="text-danger" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Production Date</label>
                                                    <InputDate @bind-Value="newVaccine.ProductionDate" class="form-control" />
                                                    <ValidationMessage For="@(() => newVaccine.ProductionDate)" class="text-danger" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Expiration Date</label>
                                                    <InputDate @bind-Value="newVaccine.ExpirationDate" class="form-control" />
                                                    <ValidationMessage For="@(() => newVaccine.ExpirationDate)" class="text-danger" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Ingredients Description</label>
                                            <InputTextArea @bind-Value="newVaccine.IngredientsDescription" class="form-control" />
                                            <ValidationMessage For="@(() => newVaccine.IngredientsDescription)" class="text-danger" />
                                        </div>
                                        <div class="d-flex gap-2">
                                            <button type="submit" class="btn btn-primary">Save</button>
                                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
            }
        </main>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@code {
    [Parameter]
    public int BatchId { get; set; }

    private bool hasRendered = false;
    private bool isAuthorized = false;
    private List<Vaccine> vaccines;
    private List<VaccineCategory> categories;
    private bool showModal = false;
    private Vaccine newVaccine = new Vaccine();
    private IBrowserFile selectedFile;
    private string imagePreviewUrl;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");

            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == "Staff";
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/Error");
            }
            else
            {
                await LoadData();
            }
        }
    }
    private void GoBack()
    {
        Navigation.NavigateTo("/staff/vaccinemanagebatch");
    }
    private async Task LoadData()
    {
        try
        {
            vaccines = VaccineRepository.GetVaccinesByBatch(BatchId) ?? new List<Vaccine>();
            categories = VaccineCategoryRepository.GetAllVaccineCategories() ?? new List<VaccineCategory>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            vaccines = new List<Vaccine>();
            categories = new List<VaccineCategory>();
            StateHasChanged();
        }
    }

    private void ShowAddVaccineModal()
    {
        newVaccine = new Vaccine { FKBatchId = BatchId, BetweenPeriod = DateTime.Now };
        selectedFile = null;
        imagePreviewUrl = null;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task HandleAddVaccine()
    {
        if (selectedFile != null)
        {
            var fileName = $"{Guid.NewGuid()}_{selectedFile.Name}";
            var filePath = Path.Combine(@"D:\PRN222\Group Project\VaccinationGroupProjectBlazorApp\VaccinationGroupProject\Picture", fileName);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream); // 10MB limit
            }
            newVaccine.Image = fileName;
        }

        VaccineRepository.AddVaccine(newVaccine);
        showModal = false;
        await LoadData();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            var memoryStream = new MemoryStream();
            await selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);
            var buffer = memoryStream.ToArray();
            imagePreviewUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            StateHasChanged();
        }
    }

    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(new Account { AccountRole = "Staff" });
    }
}