@inject IVaccineBatchRepository VaccineBatchRepository
@inject IVaccineCenterRepository VaccineCenterRepository

@if (ShowModal)
{
    <div class="modal fade show d-block" tabindex="-1" @onclick="CloseModal">
        <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Update Vaccine Batch: @Batch.VaccineBatchId</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@Batch" OnValidSubmit="HandleUpdate">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        @if (!string.IsNullOrEmpty(batchNumberErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @batchNumberErrorMessage
                            </div>
                        }
                        <div class="mb-3">
                            <label class="form-label">Batch Number</label>
                            <InputText @bind-Value="Batch.BatchNumber" class="form-control" />
                            <ValidationMessage For="@(() => Batch.BatchNumber)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Center</label>
                            <InputSelect @bind-Value="selectedCenterId" class="form-control">
                                <option value="">Select Center</option>
                                @foreach (var center in centers)
                                {
                                    <option value="@center.VacineCenterId">@center.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => selectedCenterId)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <InputSelect @bind-Value="Batch.ActiveStatus" class="form-control">
                                <option value="@ActivationEnums.ACTIVATE">Active</option>
                                <option value="@ActivationEnums.DEACTIVATE">Deactivated</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => Batch.ActiveStatus)" class="text-danger" />
                        </div>

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public VaccineBatch Batch { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }

    private List<VaccineCenter> centers = new();
    private string selectedCenterId;
    private string batchNumberErrorMessage = "";
    private string originalBatchNumber = "";

    protected override async Task OnInitializedAsync()
    {
        var (fetchedCenters, _) = VaccineCenterRepository.GetAllVaccineCenters(1, int.MaxValue);
        centers = fetchedCenters ?? new List<VaccineCenter>();
    }

    protected override void OnParametersSet()
    {
        // Store the original batch number when the modal opens
        originalBatchNumber = Batch?.BatchNumber ?? "";
        selectedCenterId = Batch?.FKCenterId.ToString() ?? "";
        batchNumberErrorMessage = "";
    }

    private async Task HandleUpdate()
    {
        // Only check for duplicate if batch number has changed
        if (Batch.BatchNumber != originalBatchNumber)
        {
            if (VaccineBatchRepository.BatchNumberExists(Batch.BatchNumber))
            {
                batchNumberErrorMessage = "This batch number already exists. Please use a unique batch number.";
                StateHasChanged();
                return;
            }
        }

        if (!string.IsNullOrEmpty(selectedCenterId))
        {
            Batch.FKCenterId = int.Parse(selectedCenterId);
        }

        VaccineBatchRepository.UpdateVaccineBatch(Batch.VaccineBatchId, Batch);
        batchNumberErrorMessage = "";
        await OnSave.InvokeAsync();
        await CloseModal();
    }

    private async Task CloseModal()
    {
        batchNumberErrorMessage = "";
        await OnClose.InvokeAsync();
    }
}