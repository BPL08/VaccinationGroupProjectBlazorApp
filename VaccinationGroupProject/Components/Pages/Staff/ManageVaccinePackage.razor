@page "/staff/vaccinepackage"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IVaccinePackageRepository VaccinePackageRepository
@inject IVaccinePackageDetailRepository VaccinePackageDetailRepository
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <StaffNavBar />

        <main class="col-md-9 col-lg-10 p-4">
            <h3 class="mb-3">Manage Vaccine Packages</h3>
            @if (!isAuthorized && hasRendered)
            {
                <div class="text-danger">Unauthorized access. Redirecting to error...</div>
            }
            else if (packages == null)
            {
                <p class="lead">Loading vaccine packages...</p>
            }
            else if (!packages.Any())
            {
                <div class="text-center p-4 bg-light border rounded">
                    <p class="lead">No vaccine packages found.</p>
                    <button class="btn btn-primary" @onclick="ShowAddPackageModal">Add New Package</button>
                </div>
            }
            else
            {
                <div class="overflow-auto mt-3">
                    <button class="btn btn-primary mb-3" @onclick="ShowAddPackageModal">Add New Package</button>
                    <table class="table table-striped table-hover table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Package ID</th>
                                <th scope="col">Name</th>
                                <th scope="col">Description</th>
                                <th scope="col">Status</th>
                                <th scope="col">Total Price</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var package in packages)
                            {
                                <tr>
                                    <td>@package.VaccinePackageId</td>
                                    <td>@package.PackageName</td>
                                    <td>@package.PackageDescription</td>
                                    <td>
                                        <span class="badge @(package.PackageStatus == 1 ? "bg-success" : "bg-danger")">
                                            @(package.PackageStatus == 1 ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>@GetTotalPrice(package.VaccinePackageId)</td>
                                    <td>
                                        <button class="btn btn-info btn-sm" @onclick="() => ViewPackageDetails(package.VaccinePackageId)">View Details</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (showModal)
            {
                <div class="modal fade show d-block" tabindex="-1" @onclick="CloseModal">
                    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Add New Vaccine Package</h4>
                                <button type="button" class="btn-close" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="@newPackage" OnValidSubmit="HandleAddPackage">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="text-danger" />
                                    <div class="mb-3">
                                        <label class="form-label">Package Name</label>
                                        <InputText @bind-Value="newPackage.PackageName" class="form-control" />
                                        <ValidationMessage For="@(() => newPackage.PackageName)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Description</label>
                                        <InputTextArea @bind-Value="newPackage.PackageDescription" class="form-control" />
                                        <ValidationMessage For="@(() => newPackage.PackageDescription)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Status</label>
                                        <InputSelect @bind-Value="newPackage.PackageStatus" class="form-control">
                                            <option value="">Select Status</option>
                                            <option value="1">Active</option>
                                            <option value="0">Inactive</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => newPackage.PackageStatus)" class="text-danger" />
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary">Save</button>
                                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </main>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@code {
    private bool hasRendered = false;
    private bool isAuthorized = false;
    private List<VaccinePackage> packages;
    private bool showModal = false;
    private VaccinePackage newPackage = new VaccinePackage();
    private Dictionary<int, int> packageTotalPrices = new Dictionary<int, int>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountId = await SessionStorage.GetItemAsync<string>("AccountId");

            if (!string.IsNullOrEmpty(accountId))
            {
                var account = await GetAccountDetails(accountId);
                isAuthorized = account?.AccountRole == "Staff";
            }
            else
            {
                isAuthorized = false;
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/Error");
            }
            else
            {
                await LoadData();
            }
        }
    }

    private async Task LoadData()
    {
        try
        {
            packages = VaccinePackageRepository.GetAllVaccinePackages() ?? new List<VaccinePackage>();
            await LoadTotalPrices();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            packages = new List<VaccinePackage>();
            packageTotalPrices.Clear();
            StateHasChanged();
        }
    }

    private async Task LoadTotalPrices()
    {
        packageTotalPrices.Clear();
        foreach (var package in packages)
        {
            var details = VaccinePackageDetailRepository.GetVaccinePackageDetailsByPackage(package.VaccinePackageId) ?? new List<VaccinePackageDetail>();
            packageTotalPrices[package.VaccinePackageId] = details.Sum(d => d.PackagePrice);
        }
    }

    private int GetTotalPrice(int packageId)
    {
        return packageTotalPrices.ContainsKey(packageId) ? packageTotalPrices[packageId] : 0;
    }

    private void ShowAddPackageModal()
    {
        newPackage = new VaccinePackage();
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task HandleAddPackage()
    {
        VaccinePackageRepository.AddVaccinePackage(newPackage);
        showModal = false;
        await LoadData();
    }

    private void ViewPackageDetails(int packageId)
    {
        Navigation.NavigateTo($"/staff/vaccinepackagedetail/{packageId}");
    }

    private async Task<Account> GetAccountDetails(string accountId)
    {
        return await Task.FromResult(new Account { AccountRole = "Staff" });
    }
}