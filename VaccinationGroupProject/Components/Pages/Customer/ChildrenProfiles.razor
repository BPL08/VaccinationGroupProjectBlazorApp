@page "/customer/children-profiles"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IAccountRepository AccountRepository
@inject IChildrenProfileRepository ChildrenProfileRepository
@using BO.Entity
@using BO.Enums
@rendermode InteractiveServer

<div class="container mt-5 children-container">
    <h2 class="text-center mb-4 text-primary fw-bold">Your Children Profiles</h2>

    @if (!isAuthorized && hasRendered)
    {
        <div class="alert alert-danger text-center">Unauthorized access. Redirecting to login...</div>
    }
    else if (childrenProfiles == null)
    {
        <p class="lead text-center text-muted">Loading profiles...</p>
    }
    else if (!childrenProfiles.Any())
    {
        <p class="lead text-center text-muted">No children profiles found.</p>
        <button class="btn btn-primary" @onclick="AddProfile">Add New Profile</button>
    }
    else
    {
        <div class="row g-4">
            @foreach (var profile in childrenProfiles)
            {
                <div class="col-md-6">
                    <div class="card shadow-sm children-card h-100">
                        <div class="card-body">
                            <h5 class="card-title text-primary">@profile.Name</h5>
                            <p class="card-text">
                                <strong>Parent:</strong> @profile.ParentName <br />
                                <strong>DOB:</strong> @profile.DateOfBirth.ToShortDateString() <br />
                                <strong>Gender:</strong> @profile.Gender <br />
                                <strong>Status:</strong> @profile.Status
                            </p>
                        </div>
                        <div class="card-footer d-flex justify-content-between">
                            <button class="btn btn-outline-primary btn-sm">Edit</button>
                            <button class="btn btn-outline-danger btn-sm">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="d-flex justify-content-between mt-4">
            <button class="btn btn-primary" @onclick="AddProfile">Add New Profile</button>
            <button class="btn btn-secondary" @onclick="GoBack">Back to Home</button>
        </div>
    }
</div>

<link rel="stylesheet" href="customer/ChildrenProfiles.razor.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@code {
    private bool hasRendered = false;
    private bool isAuthorized = false;
    private List<ChildrenProfile> childrenProfiles;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            var accountIdString = await SessionStorage.GetItemAsync<string>("AccountId");

            if (string.IsNullOrEmpty(accountIdString) || !Guid.TryParse(accountIdString, out Guid accountId))
            {
                isAuthorized = false;
            }
            else
            {
                var account = AccountRepository.GetAccountById(accountId);
                isAuthorized = account?.AccountRole == RoleEnums.Customer;
                if (isAuthorized)
                {
                    childrenProfiles = ChildrenProfileRepository.GetProfilesByAccountId(accountId) ?? new List<ChildrenProfile>();
                }
            }

            hasRendered = true;

            if (!isAuthorized)
            {
                Navigation.NavigateTo("/login");
            }
            StateHasChanged();
        }
    }

    private void AddProfile()
    {
        // Logic để thêm profile mới (có thể chuyển hướng đến form thêm profile)
        Navigation.NavigateTo("/customer/children-profiles/add");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/customer/home");
    }
}